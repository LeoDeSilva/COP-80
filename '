const { TOKENS, Error, Token } = require("../Lexer/tokens");
const {
  ProgramNode,
  NumberNode,
  BinaryOperationNode,
  UnaryOperationNode,
} = require("../Parser/nodes");

const {
  Number,
} = require("./objects.js");

function Evaluate(node, Environment) {
  switch (node) {
    case BinaryOperationNode:
      return BinaryOperation(node, Environment)
    case NumberNode:
      return Number(node.LineNumber, node.Value)
    case ProgramNode:
      return Program(node, Environment)
  }

  return [null, n]
}

function Program(programNode, Environment) {
  let [result, err] = [null, null]
  for (let i = 0; i < programNode.Nodes.length; i++) {
    let [result, err] = Evaluate(programNode.Nodes[i], Environment)
    if (err != null) return [null, err]
    
  }
  return (result, err)
}

function BinaryOperation(binaryNode, Environment) {
  return [Number(binaryNode.LineNumber, 1), null]
}

module.exports = {
  Evaluate
}
